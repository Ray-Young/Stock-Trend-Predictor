package lab.DTW;

import java.util.Arrays;

public class WrapTrack {
	public static double[] source = { 28.621, 27.875, 29.673, 28.397, 27.398, 27.254, 28.054, 27.245, 26.526, 26.022,
			23.891, 24.53, 25.707, 26.975, 25.897, 27.299, 27.138, 26.039, 26.617, 26.455, 26.203 };

	public static double[] target = { 23.762, 23.82, 23.807, 23.857, 23.767, 23.773, 23.759, 23.769, 23.847, 23.699,
			23.729, 23.694, 23.648, 23.696, 23.719, 23.724, 23.727, 23.615, 23.644, 23.727, 23.541, 23.536, 23.531,
			23.616, 23.49, 23.482, 23.506, 23.504, 23.148, 23.34, 23.379, 23.56, 23.495, 23.485, 23.457, 23.448, 23.24,
			22.992, 22.871, 22.97, 23.048, 23.113, 23.238, 23.152, 23.23, 22.959, 23.076, 23.112, 22.711, 23.081,
			23.296, 23.081, 23.334, 23.35, 23.36, 23.413, 23.365, 23.291, 23.232, 23.196, 23.363, 23.291, 23.217,
			23.224, 23.248, 23.246, 23.232, 23.246, 23.369, 23.415, 23.236, 23.212, 23.185, 23.158, 23.109, 23.096,
			23.173, 23.168, 23.186, 23.129, 23.185, 23.056, 23.096, 23.096, 22.953, 23.154, 23.286, 23.27, 23.251,
			23.249, 23.445, 23.508, 23.484, 23.529, 23.602, 23.635, 23.63, 23.611, 23.604, 23.635, 23.587, 23.48,
			23.577, 23.619, 23.749, 23.604, 23.628, 23.625, 23.709, 23.676, 23.751, 23.73, 23.553, 23.73, 23.744,
			23.728, 23.754, 23.786, 23.709, 23.715, 23.744, 23.754, 23.513, 23.601, 23.546, 23.616, 23.635, 23.632,
			23.659, 23.637, 23.652, 23.657, 23.657, 23.676, 23.669, 23.669, 23.633, 23.599, 23.572, 23.536, 23.473,
			23.63, 23.555, 23.543, 23.589, 23.597, 23.614, 23.891, 23.609, 23.778, 23.539, 23.492, 23.462, 23.543,
			23.531, 23.506, 23.527, 23.534, 23.506, 23.524, 23.648, 23.686, 23.648, 23.607, 23.619, 23.631, 23.682,
			23.626, 23.67, 23.67, 23.698, 23.734, 23.691, 23.764, 23.755, 23.717, 23.779, 23.796, 23.764, 23.755,
			23.772, 23.784, 23.762, 23.818, 23.808, 23.738, 23.743, 23.851, 23.764, 23.821, 23.818, 23.794, 23.801,
			23.767, 23.762, 23.772, 23.752, 23.821, 23.794, 23.833, 23.741, 23.729, 23.731, 23.734, 23.764, 23.874,
			23.759, 23.762, 23.755, 23.689, 23.821, 23.787, 23.841, 23.853, 23.958, 23.912, 23.887, 23.881, 23.838,
			23.872, 23.859, 23.885, 23.848, 23.869, 23.895, 23.892, 23.887, 23.915, 23.892, 23.864, 23.933, 23.946,
			23.99, 23.915, 23.988, 23.969, 23.981, 23.887, 24.101, 24.018, 24.072, 24.056, 24.04, 24.004, 23.988,
			23.957, 23.984, 24.004, 23.97, 23.854, 24.028, 23.977, 23.817, 23.834, 23.826, 23.858, 23.901, 23.849,
			23.844, 23.877, 23.88, 23.905, 23.963, 23.885, 23.893, 23.886, 23.893, 23.865, 23.834, 23.945, 23.949,
			23.937, 23.923, 23.906, 23.86, 23.94, 23.92, 23.942, 23.908, 23.915, 23.92, 23.868, 23.903, 23.906, 23.892,
			23.921, 23.943, 23.926, 23.967, 23.992, 23.926, 23.983, 23.948, 24.027, 23.955, 24.002, 23.928, 23.957,
			23.962, 23.951, 23.953, 23.964, 23.992, 24.012, 23.913, 23.939, 23.915, 23.977, 23.972, 23.951, 23.821,
			23.838, 23.74, 23.907, 23.879, 23.876, 23.893, 23.841, 23.915, 23.897, 23.813, 23.866, 23.876, 23.974,
			23.923, 23.928, 23.931, 23.976, 24.007, 24.01, 24.024, 24.085, 23.995, 24.002, 24.114, 24.03, 24.095,
			24.069, 24.022, 24.002, 23.981, 23.969, 23.953, 23.967, 23.924, 24.01, 23.981, 23.889, 23.907, 23.965,
			23.969, 23.943, 23.986, 23.897, 23.986, 24.003, 24.022, 24.038, 24.051, 24.029, 24.006, 24.012, 23.971,
			23.945, 23.984, 23.999, 24.021, 24.064, 23.992, 24.004, 23.999, 23.959, 23.898, 23.872, 23.977, 23.97,
			23.986, 24.028, 23.946, 24.06, 24.142, 23.972, 24.023, 24.112, 24.188, 24.003, 24.301, 24.271, 24.265,
			24.273, 24.235, 24.152, 24.262, 24.103, 24.125, 24.296, 24.301, 24.311, 24.372, 24.122, 24.22, 24.249,
			24.103, 24.271, 24.326, 24.359, 24.263, 24.252, 24.316, 24.174, 24.311, 24.316, 24.372, 24.277, 24.262,
			24.212, 24.222, 24.214, 24.254, 24.137, 24.124, 24.185, 24.181, 24.2, 24.227, 24.22, 24.263, 24.256, 24.45,
			24.362, 24.359, 24.247, 24.367, 24.344, 24.181, 24.195, 24.237, 24.352, 24.39, 24.416, 24.254, 24.377,
			24.458, 24.234, 24.337, 24.262, 24.421, 24.367, 24.41, 24.369, 24.369, 24.367, 24.364, 24.563, 24.388, 24.4,
			24.349, 24.344, 24.301, 24.248, 24.248, 24.203, 24.281, 24.418, 24.321, 24.314, 24.284, 24.284, 24.334,
			24.321, 24.296, 24.314, 24.135, 24.309, 24.289, 24.286, 24.152, 24.359, 24.344, 24.182, 24.15, 24.294,
			24.22, 24.21, 24.287, 24.264, 24.15, 24.263, 24.277, 24.15, 24.16, 24.289, 24.396, 24.362, 24.349, 24.174,
			24.203, 24.154, 24.396, 24.418, 24.278, 24.292, 24.329, 24.265, 24.41, 24.364, 24.428, 24.372, 24.416,
			24.408, 24.198, 24.386, 24.359, 24.277, 24.282, 24.342, 24.184, 24.378, 24.206, 24.317, 24.357, 24.218,
			24.38, 24.198, 24.312, 24.312, 24.273, 24.317, 24.305, 24.206, 24.28, 24.18, 24.319, 24.31, 24.302, 24.189,
			24.15, 24.094, 24.182, 24.307, 24.307, 24.325, 24.14, 24.359, 24.118, 24.184, 24.155, 24.359, 24.13, 24.206,
			24.307, 24.165, 24.152, 24.214, 24.145, 24.335, 24.357, 24.244, 24.378, 24.378, 24.322, 24.322, 24.357,
			24.238, 24.237, 24.237, 24.237, 24.237, 24.528, 24.291, 24.828, 24.305, 24.308, 24.435, 24.435, 24.389,
			24.355, 24.234, 24.377, 24.394, 24.433, 24.448, 24.381, 24.379, 24.33, 24.194, 24.377, 24.383, 24.206,
			24.36, 24.355, 24.236, 24.221, 24.249, 24.246, 24.391, 24.236, 24.249, 24.32, 24.377, 24.362, 24.367,
			24.372, 24.372, 24.259, 24.259, 24.244, 24.337, 24.34, 24.337, 24.337, 24.337, 24.231, 24.231, 24.305,
			24.303, 24.167, 24.214, 24.295, 24.362, 24.357, 24.354, 24.321, 24.342, 24.339, 24.349, 24.214, 24.206,
			24.364, 24.324, 24.297, 24.334, 24.344, 24.341, 24.253, 24.301, 24.322, 24.243, 24.201, 24.301, 24.283,
			24.198, 24.269, 24.324, 24.303, 24.297, 24.208, 24.195, 24.281, 24.263, 24.277, 24.296, 24.279, 24.299,
			24.289, 24.225, 24.208, 24.263, 24.215, 24.22, 24.252, 24.271, 24.245, 24.267, 24.294, 24.299, 24.262,
			24.213, 24.301, 24.228, 24.223, 24.236, 24.236, 24.309, 24.301, 24.381, 24.238, 24.303, 24.372, 24.351,
			24.406, 24.375, 24.442, 24.434, 24.377, 24.386, 24.462, 24.462, 24.456, 24.333, 24.449, 24.426, 24.385,
			24.462, 24.462, 24.453, 24.459, 24.452, 24.38, 24.449, 24.457, 24.459, 24.48, 24.454, 24.449, 24.491,
			24.474, 24.517, 24.485, 24.468, 24.501, 24.491, 24.452, 24.444, 24.481, 24.369, 24.489, 24.397, 24.42,
			24.455, 24.37, 24.416, 24.412, 24.469, 24.508, 24.406, 24.51, 24.545, 24.555, 24.551, 24.486, 24.567,
			24.496, 24.589, 24.579, 24.572, 24.543, 24.579, 24.606, 24.575, 24.575, 24.597, 24.586, 24.598, 24.47,
			24.392, 24.569, 24.593, 24.501, 24.571, 24.591, 24.576, 24.576, 24.502, 24.545, 24.716, 24.616, 24.611,
			24.528, 24.548, 24.448, 24.577, 24.577, 24.577, 24.637, 24.596, 24.577, 24.547, 24.623, 24.547, 24.563,
			24.567, 24.602, 24.567, 24.508, 24.592, 24.577, 24.573, 24.568, 24.573, 24.573, 24.607, 24.583, 24.583,
			24.583, 24.602, 24.63, 24.593, 24.593, 24.583, 24.583, 24.544, 24.567, 24.573, 24.583, 24.593, 24.633,
			24.59, 24.61, 24.55, 24.55, 24.585, 24.511, 24.6, 24.58, 24.557, 24.63, 24.58, 24.597, 24.605, 24.605,
			24.61, 24.59, 24.618, 24.58, 24.587, 24.597, 24.59, 24.606, 24.556, 24.646, 24.537, 24.646, 24.63, 24.617,
			24.576, 24.607, 24.596, 24.576, 24.537, 24.596, 24.507, 24.596, 24.583, 24.586, 24.487, 24.586, 24.596,
			24.527, 24.576, 24.496, 24.564, 24.496, 24.563, 24.585, 24.506, 24.567, 24.594, 24.585, 24.594, 24.539,
			24.513, 24.585, 24.561, 24.595, 24.593, 24.593, 24.593, 24.563, 24.573, 24.562, 24.593, 24.573, 24.568,
			24.593, 24.563, 24.553, 24.563, 24.561, 24.573, 24.563, 24.544, 24.544, 24.544, 24.553, 24.585, 24.556,
			24.544, 24.565, 24.55, 24.593, 24.53, 24.549, 24.54, 24.556, 24.609, 24.617, 24.605, 24.619, 24.619, 24.616,
			24.624, 24.595, 24.616, 24.579, 24.585, 24.627, 24.618, 24.623, 24.649, 24.634, 24.606, 24.607, 24.596,
			24.635, 24.636, 24.581, 24.581, 24.606, 24.605, 24.576, 24.636, 24.576, 24.616, 24.636, 24.636, 24.636,
			24.606, 24.656, 24.656, 24.636, 24.646, 24.641, 24.67, 24.6381, 24.65, 24.65, 24.66, 24.67, 24.63, 24.6547,
			24.6899, 24.6101, 24.65, 24.64, 24.65, 24.66, 24.6101, 24.6301, 24.65, 24.68, 24.688 };

	public static double[][] getMinDisByDTW(double[] sourceArray, double[] targetArray) {
		int s = sourceArray.length;
		int t = targetArray.length;
		double[][] D0 = new double[s + 1][t + 1];

		for (int i = 1; i < D0.length; i++) {
			D0[i][0] = Double.MAX_VALUE;
		}

		for (int i = 1; i < D0[0].length; i++) {
			D0[0][i] = Double.MAX_VALUE;
		}

		for (int i = 0; i < s; i++) {
			for (int j = 0; j < t; j++) {
				D0[i + 1][j + 1] = dist(sourceArray[i], targetArray[j]);
			}
		}

		for (int i = 0; i < s; i++) {
			for (int j = 0; j < t; j++) {
				D0[i + 1][j + 1] += Math.min(D0[i][j], Math.min(D0[i + 1][j], D0[i][j + 1]));
			}
		}

		return D0;
	}

	public static double dist(double x, double y) {
		return Math.sqrt((x - y) * (x - y));
	}

	public static void main(String[] args) {
		System.out.println(Arrays.deepToString(getMinDisByDTW(source, target)));
	}
}
